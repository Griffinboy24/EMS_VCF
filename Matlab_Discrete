%% EMS VCS3 VCF EXACT IMPLEMENTATION WITH DEBUG OUTPUT
% This script processes a WAV file using the EMS VCS3 filter model exactly as 
% described in:
%   Zambon, S. & Fontana, F. (2011). Efficient Polynomial Implementation of the EMS VCS3 Filter Model.
%   Proc. of the 14th International Conference on Digital Audio Effects (DAFx-11).
%
% It supports sample rate conversion and file dialogs for both input and output.
% The input signal is normalized and scaled to a tens-of-mV range (e.g., ±50 mV).

clc; clear; close all;

%% Debug flag (set to true to print Newton–Raphson iteration details)
debugFlag = false;

%% 1) Open file dialog to select input WAV file
[fileName, pathName] = uigetfile('*.wav','Select an input WAV file');
if isequal(fileName,0)
    disp('User selected Cancel.');
    return;
end
inputFile = fullfile(pathName, fileName);
[inSignal, inFs] = audioread(inputFile);

% If stereo, convert to mono by averaging channels
if size(inSignal,2) > 1
    inSignal = mean(inSignal, 2);
end

%% 2) Set base sampling rate and convert input signal if necessary
Fs = 44100;  % Base sampling rate (Hz)
if inFs ~= Fs
    inSignal = resample(inSignal, Fs, inFs, 100);
end

%% 3) Normalize and Scale Input Signal
% Normalize the input to ±1 and then scale to a tens-of-mV range (e.g., ±50 mV)
if max(abs(inSignal)) > 0
    inSignal = inSignal / max(abs(inSignal));
end

inputScale = 0.06;  % Scale factor (e.g., ±80 mV)
inSignal = inSignal * inputScale;

%% 4) Discretization Parameters and Oversampling
T          = 1 / Fs;           % Base sampling period
oversample = 8;                % Oversampling factor
Fs_os      = Fs * oversample;   % Oversampled rate
T_os       = 1 / Fs_os;         % Oversampled period

% Upsample the input signal using a 100-tap FIR filter
inSignal_os = resample(inSignal, oversample, 1, 100);
N_os = length(inSignal_os);

%% 5) Define Filter Constants and Desired Cutoff Frequency
C       = 0.1e-6;    % 0.1 µF
eta     = 1.836;
VT      = 26e-3;     % 26 mV
gamma   = eta * VT;  % ~48 mV

fc_start = 100;      % Initial cutoff frequency (Hz)
fc_end   = 2000;     % Final cutoff frequency (Hz)
K       = 0.0;       % Feedback gain

fc = fc_start;       % Initial cutoff

% --- Corrected cutoff scaling ---
% Per the paper, the small-signal pole is at I0/(2C). Setting I0 = 2*C*(2*pi*fc)
% places the pole at 2*pi*fc.
I0 = 2 * C * (2*pi*fc);  % I0 = 4*pi*C*fc

% Precompute filter coefficients (see Eq. (4) in the paper)
c1 = I0/(4*C*gamma);
c2 = I0/(4*C*gamma);
c3 = I0/(4*C*gamma);
c4 = I0*(K+0.5)/(4*C*VT);
c5 = I0/(12*C*gamma);
filterCoeffs = struct('c1', c1, 'c2', c2, 'c3', c3, 'c4', c4, 'c5', c5, ...
                      'VT', VT, 'gamma', gamma, 'K', K, 'I0', I0, 'C', C);

%% 6) Initialize State Variables and Integration Variables
% State vector x = [x1; x2; x3; x4; x5] per Eq. (2) in the paper
x = zeros(5,1);

% The capacitor voltage vC4 is integrated separately; the output is:
%   vOUT = (K + 0.5)*vC4
vC4 = 0;

% Initialize first input sample and compute initial state derivative
vIN0 = inSignal_os(1);
f0 = vcs3_filter_dynamics(x, vIN0, filterCoeffs); % Compute f(x,vIN)
F0 = (T_os/2) * f0;   % Initialize auxiliary variable per Eq. (7)

% For trapezoidal integration of vC4, initialize the previous derivative:
%   v̇C4 = -(I0/(2*C))*(x5 + x3)
f_prev = -(I0/(2*C))*(x(5) + x(3));

% Preallocate output vector for oversampled processing
y_os = zeros(N_os,1);

% Set up cutoff modulation (linear ramp from fc_start to fc_end)
fc_values = linspace(fc_start, fc_end, N_os);

%% 7) Filter Processing Loop (Oversampled Integration)
lastProgress = 0;
fprintf('Progress: ');
for n = 1:N_os-1
    % Update progress (print every percent)
    progress = floor((n/(N_os-1))*100);
    if progress > lastProgress
        lastProgress = progress;
        fprintf('%d%% ', progress);
    end
    
    % Update cutoff frequency and compute new I0 for this sample
    fc = fc_values(n);
    I0 = 2 * C * (2*pi*fc);  % <-- Use fc directly (do not halve fc)
    
    % Update filter coefficients with the new I0
    filterCoeffs.I0 = I0;
    filterCoeffs.c1 = I0/(4*C*gamma);
    filterCoeffs.c2 = I0/(4*C*gamma);
    filterCoeffs.c3 = I0/(4*C*gamma);
    filterCoeffs.c4 = I0*(K+0.5)/(4*C*VT);
    filterCoeffs.c5 = I0/(12*C*gamma);
    
    % Get next input sample
    vIN_next = inSignal_os(n+1);
    
    % Newton–Raphson step to solve the implicit equation (Eq. (7))
    [x, F0] = vcs3_step(x, F0, vIN_next, filterCoeffs, T_os, debugFlag);
    
    % Trapezoidal integration of vC4:
    % v̇C4 = -(I0/(2*C))*(x5 + x3) per the paper
    f_now = -(I0/(2*C))*(x(5) + x(3));
    vC4 = vC4 + (T_os/2) * (f_prev + f_now);
    f_prev = f_now;
    
    % Update auxiliary states per Eq. (2)
    % x4 = tanh( - (K+0.5)*vC4/(2*VT) )
    % x5 = tanh( vC4/(6*gamma) )
    x(4) = tanh( - (filterCoeffs.K+0.5) * vC4 / (2*filterCoeffs.VT) );
    x(5) = tanh( vC4 / (6*filterCoeffs.gamma) );
    
    % Filter output: vOUT = (K + 0.5)*vC4
    y_os(n) = (filterCoeffs.K + 0.5) * vC4;
end
fprintf('\n');

%% 8) Downsample and Save Processed Output
outputScale = 2.0;  % Adjust output volume scaling as needed
y = resample(y_os, 1, oversample, 100);
y = y * outputScale;  % Apply output scaling

[outputFileName, outputPath] = uiputfile('*.wav','Save Processed WAV File As');
if isequal(outputFileName,0)
    disp('User selected Cancel for saving.');
    return;
end
outputFile = fullfile(outputPath, outputFileName);
audiowrite(outputFile, y, Fs);
disp(['Processed file saved as: ', outputFile]);

%% ===================== Local Functions ================================

function dx = vcs3_filter_dynamics(x, vIN, filterCoeffs)
% Computes the state derivative vector f(x,vIN) as per Eq. (4) in the paper.
% The nonlinearity tanh((vIN - vOUT)/(2VT)) is replaced by the addition formula:
%   (v_tilde + x4)/(1 + v_tilde*x4), where v_tilde = tanh(vIN/(2VT)).
    v_tilde = tanh(vIN/(2*filterCoeffs.VT));
    c1 = filterCoeffs.c1;
    c2 = filterCoeffs.c2;
    c3 = filterCoeffs.c3;
    c4 = filterCoeffs.c4;
    c5 = filterCoeffs.c5;
    
    % Addition formula for the nonlinearity:
    nonlin = (v_tilde + x(4))/(1 + v_tilde*x(4));
    
    dx = zeros(5,1);
    dx(1) = c1 * (x(2) - nonlin) * (1 - x(1)^2);
    dx(2) = c2 * (x(3) - 2*x(2) + x(1)) * (1 - x(2)^2);
    dx(3) = c3 * (-x(5) - 2*x(3) - x(2)) * (1 - x(3)^2);
    dx(4) = c4 * (-x(5) - x(3)) * (1 - x(4)^2);
    dx(5) = c5 * (-x(5) - x(3)) * (1 - x(5)^2);
end

function [x_next, F0_next] = vcs3_step(x, F0, vIN_next, filterCoeffs, T, debugFlag)
% Newton–Raphson solver for the implicit equation in Eq. (7):
%   F(ξ) = F0 + (T/2)*f(vIN_next,ξ) - ξ = 0.
% The auxiliary variable is updated per Eq. (8): F0_next = 2*x_next - F0.
    x_next   = x;
    max_iter = 10;
    tol      = 1e-8;
    v_tilde = tanh(vIN_next/(2*filterCoeffs.VT));
    for iter = 1:max_iter
        f_val = vcs3_filter_dynamics(x_next, vIN_next, filterCoeffs);
        F_res = F0 + (T/2)*f_val - x_next;
        J_f = compute_jacobian(x_next, v_tilde, filterCoeffs);
        J_F = (T/2)*J_f - eye(5);
        [L, U, P] = lu(J_F);
        delta = U \ (L \ (P * (-F_res)));
        x_next = x_next + delta;
        if debugFlag
            fprintf('Newton iter %d: norm(delta,inf)= %e, norm(F_res,inf)= %e\n', iter, norm(delta,inf), norm(F_res,inf));
        end
        if norm(delta, inf) < tol
            break;
        end
    end
    if iter == max_iter && norm(delta,inf) >= tol && debugFlag
        warning('Newton–Raphson did not converge within %d iterations; final norm(delta,inf)= %e', max_iter, norm(delta,inf));
    end
    F0_next = 2*x_next - F0;
end

function J_f = compute_jacobian(x, v_tilde, filterCoeffs)
% Computes the Jacobian matrix J_f = ∂f/∂x (Eq. (11) in the paper)
    x1 = x(1); x2 = x(2); x3 = x(3); x4 = x(4); x5 = x(5);
    c1 = filterCoeffs.c1;
    c2 = filterCoeffs.c2;
    c3 = filterCoeffs.c3;
    c4 = filterCoeffs.c4;
    c5 = filterCoeffs.c5;
    
    d1 = 1 - x1^2;
    d2 = 1 - x2^2;
    d3 = 1 - x3^2;
    d4 = 1 - x4^2;
    d5 = 1 - x5^2;
    
    t1 = x2 - (v_tilde + x4)/(1 + v_tilde*x4);
    t2 = x3 - 2*x2 + x1;
    t3 = -x5 - 2*x3 - x2;
    t4 = -x5 - x3;
    t5 = -x5 - x3;
    
    fv = (1 - v_tilde^2)/((1 + v_tilde*x4)^2);
    
    % --- Corrected Jacobian (1,1) entry: use 2*c1*(t1*x1) instead of 2*c1*(d1+t1*x1)
    J_f = -[ 2*c1*(t1*x1),       -c1*d1,          0,       c1*d1*fv,         0;...
             -c2*d2,         2*c2*(d2 + t2*x2),   -c2*d2,  0,                0;...
             0,              -c3*d3,          2*c3*(d3 + t3*x3), 0,       c3*d3;...
             0,               0,               c4*d4,   2*c4*t4*x4,      c4*d4;...
             0,               0,               c5*d5,   0,               c5*(d5+2*t5*x5)];
end
