import numpy as np
import soundfile as sf
import tkinter as tk
from tkinter import filedialog
from scipy.signal import resample_poly
import time
from numpy.linalg import inv
import numba as nb

# ------------------------------------------------------------------------
# Custom 5x5 LU solver with partial pivoting implemented in Numba.
# ------------------------------------------------------------------------
@nb.njit
def solve_5x5_pivot(A, b):
    n = 5
    A = A.copy()
    b = b.copy()
    for k in range(n - 1):
        max_index = k
        max_value = abs(A[k, k])
        for i in range(k + 1, n):
            if abs(A[i, k]) > max_value:
                max_value = abs(A[i, k])
                max_index = i
        if max_index != k:
            for j in range(n):
                temp = A[k, j]
                A[k, j] = A[max_index, j]
                A[max_index, j] = temp
            temp = b[k]
            b[k] = b[max_index]
            b[max_index] = temp
        for i in range(k + 1, n):
            factor = A[i, k] / A[k, k]
            for j in range(k, n):
                A[i, j] -= factor * A[k, j]
            b[i] -= factor * b[k]
    x = np.empty(n)
    for i in range(n - 1, -1, -1):
        s = b[i]
        for j in range(i + 1, n):
            s -= A[i, j] * x[j]
        x[i] = s / A[i, i]
    return x

# ------------------------------------------------------------------------
# Numba jitted inner loop: dynamics function.
# ------------------------------------------------------------------------
@nb.njit
def vcs3_filter_dynamics_numba(x, vIN, c1, c2, c3, c4, c5, VT):
    v_tilde = np.tanh(vIN / (2 * VT))
    nonlin = (v_tilde + x[3]) / (1 + v_tilde * x[3])
    dx = np.empty(5)
    dx[0] = c1 * (x[1] - nonlin) * (1 - x[0] * x[0])
    dx[1] = c2 * (x[2] - 2 * x[1] + x[0]) * (1 - x[1] * x[1])
    dx[2] = c3 * (-x[4] - 2 * x[2] - x[1]) * (1 - x[2] * x[2])
    dx[3] = c4 * (-x[4] - x[2]) * (1 - x[3] * x[3])
    dx[4] = c5 * (-x[4] - x[2]) * (1 - x[4] * x[4])
    return dx

# ------------------------------------------------------------------------
# Numba jitted inner loop: Jacobian computation.
# ------------------------------------------------------------------------
@nb.njit
def compute_jacobian_numba(x, v_tilde, c1, c2, c3, c4, c5):
    x1 = x[0]; x2 = x[1]; x3 = x[2]; x4 = x[3]; x5 = x[4]
    d1 = 1 - x1 * x1
    d2 = 1 - x2 * x2
    d3 = 1 - x3 * x3
    d4 = 1 - x4 * x4
    d5 = 1 - x5 * x5
    t1 = x2 - (v_tilde + x4) / (1 + v_tilde * x4)
    t2 = x3 - 2 * x2 + x1
    t3 = -x5 - 2 * x3 - x2
    t4 = -x5 - x3
    t5 = t4
    fv = (1 - v_tilde * v_tilde) / ((1 + v_tilde * x4) * (1 + v_tilde * x4))
    J = np.zeros((5,5))
    J[0, 0] = 2 * c1 * (t1 * x1)
    J[0, 1] = -c1 * d1
    J[0, 2] = 0.0
    J[0, 3] = c1 * d1 * fv
    J[0, 4] = 0.0

    J[1, 0] = -c2 * d2
    J[1, 1] = 2 * c2 * (d2 + t2 * x2)
    J[1, 2] = -c2 * d2
    J[1, 3] = 0.0
    J[1, 4] = 0.0

    J[2, 0] = 0.0
    J[2, 1] = -c3 * d3
    J[2, 2] = 2 * c3 * (d3 + t3 * x3)
    J[2, 3] = 0.0
    J[2, 4] = c3 * d3

    J[3, 0] = 0.0
    J[3, 1] = 0.0
    J[3, 2] = c4 * d4
    J[3, 3] = 2 * c4 * (t4 * x4)
    J[3, 4] = c4 * d4

    J[4, 0] = 0.0
    J[4, 1] = 0.0
    J[4, 2] = c5 * d5
    J[4, 3] = 0.0
    J[4, 4] = c5 * (d5 + 2 * t5 * x5)
    return -J

# ------------------------------------------------------------------------
# Fixed-iteration Newton with predictor-corrector.
# We assume that we maintain both the current state x and the previous state x_prev.
# The predictor is: x_pred = 2*x - x_prev, then perform a fixed number (2) of Newton iterations.
# ------------------------------------------------------------------------
@nb.njit
def vcs3_step_newton_predictor(x, x_prev, F0, vIN_next, v_tilde, c1, c2, c3, c4, c5, VT, gamma, K, T):
    # Predictor step.
    x_pred = 2 * x - x_prev
    x_next = x_pred.copy()
    # Fixed number of Newton iterations (e.g. 2 iterations).
    for i in range(2):
        f_val = vcs3_filter_dynamics_numba(x_next, vIN_next, c1, c2, c3, c4, c5, VT)
        F_res = F0 + (T/2) * f_val - x_next
        J_f = compute_jacobian_numba(x_next, v_tilde, c1, c2, c3, c4, c5)
        J_F = (T/2) * J_f - np.eye(5)
        delta = solve_5x5_pivot(J_F, -F_res)
        x_next = x_next + delta
    F0_next = 2 * x_next - F0
    return x_next, F0_next, x  # Return new state, updated F0, and old x becomes new x_prev

# ------------------------------------------------------------------------
# Process filter core using fixed-iteration predictor-corrector Newton.
# We vectorize the outer loop by processing samples sequentially.
# We maintain both x and x_prev.
# ------------------------------------------------------------------------
@nb.njit
def process_filter_core(x_in, vTilde_in, I0_vals, c1_vals, c2_vals, c3_vals, c4_vals, c5_vals, T_os, VT, gamma, K, C):
    N = x_in.shape[0]
    y_out = np.zeros(N)
    # Initialize state and previous state.
    x = np.zeros(5)
    x_prev = np.zeros(5)
    vC4 = 0.0
    prev_I0 = I0_vals[0]
    f0 = vcs3_filter_dynamics_numba(x, x_in[0], c1_vals[0], c2_vals[0], c3_vals[0], c4_vals[0], c5_vals[0], VT)
    F0 = (T_os/2) * f0
    for n in range(N - 1):
        c1 = c1_vals[n]
        c2 = c2_vals[n]
        c3 = c3_vals[n]
        c4 = c4_vals[n]
        c5 = c5_vals[n]
        I0 = I0_vals[n]
        vIN_next = x_in[n+1]
        v_tilde = np.tanh(vIN_next/(2*VT))  # Note: We use standard tanh inside Newton for speed.
        x, F0, x_prev = vcs3_step_newton_predictor(x, x_prev, F0, vIN_next, v_tilde, c1, c2, c3, c4, c5, VT, gamma, K, T_os)
        f_prev = -(prev_I0/(2*C)) * (x[4] + x[2])
        f_now  = -(I0/(2*C)) * (x[4] + x[2])
        vC4 = vC4 + (T_os/2) * (f_prev + f_now)
        prev_I0 = I0
        x[3] = np.tanh(- (K+0.5) * vC4/(2*VT))
        x[4] = np.tanh(vC4/(6*gamma))
        y_out[n] = (K+0.5)*vC4
    return y_out

# ------------------------------------------------------------------------
# Main processing: file I/O, precomputations, and timing.
# This version uses a fixed-iteration Newton predictor-corrector scheme for realtime operation.
# ------------------------------------------------------------------------
def main():
    root = tk.Tk()
    root.withdraw()
    inputFile = filedialog.askopenfilename(filetypes=[("WAV files", "*.wav")],
                                           title="Select an input WAV file")
    if not inputFile:
        print("User selected Cancel.")
        return

    inSignal, inFs = sf.read(inputFile)
    if inSignal.ndim > 1:
        inSignal = np.mean(inSignal, axis=1)
    Fs = 44100
    if inFs != Fs:
        inSignal = resample_poly(inSignal, Fs, inFs)
    inSignal = inSignal / np.max(np.abs(inSignal)) if np.max(np.abs(inSignal)) > 0 else inSignal
    inputScale = 0.05
    inSignal = inSignal * inputScale
    preSilenceDuration = 0.5
    preSilenceSamples = int(round(preSilenceDuration * Fs))
    inSignal = np.concatenate((np.zeros(preSilenceSamples), inSignal))

    oversample = 8
    T = 1 / Fs
    Fs_os = Fs * oversample
    T_os = 1 / Fs_os
    x_os = resample_poly(inSignal, oversample, 1)
    N = x_os.shape[0]

    eta = 1.836
    VT = 26e-3
    gamma = eta * VT
    fc_start = 50
    fc_end = 1000
    K = 0.0
    C = 0.1e-6

    fc_vals = np.logspace(np.log10(fc_start), np.log10(fc_end), N)
    I0_vals = 4 * np.pi * C * fc_vals
    c1_vals = np.pi * fc_vals / gamma
    c2_vals = c1_vals.copy()
    c3_vals = c1_vals.copy()
    c4_vals = np.pi * fc_vals * (K+0.5) / VT
    c5_vals = np.pi * fc_vals / (3 * gamma)

    start_time = time.perf_counter()
    y_out = process_filter_core(x_os, x_os, I0_vals, c1_vals, c2_vals, c3_vals, c4_vals, c5_vals, T_os, VT, gamma, K, C)
    end_time = time.perf_counter()
    proc_time = end_time - start_time

    outputScale = 2.5
    y = resample_poly(y_out, 1, oversample)
    y = y * outputScale
    preSilenceSamples_final = int(round(preSilenceDuration * Fs))
    if len(y) > preSilenceSamples_final:
        y = y[preSilenceSamples_final:]
    
    outputFile = filedialog.asksaveasfilename(defaultextension=".wav",
                                              filetypes=[("WAV files", "*.wav")],
                                              title="Save Processed WAV File As")
    if not outputFile:
        print("User selected Cancel for saving.")
        return
    sf.write(outputFile, y, Fs)
    print("Processed file saved as:", outputFile)

    audio_duration = len(inSignal) / Fs
    print(f"Processing time: {proc_time:.3f} sec")
    print(f"Audio duration: {audio_duration:.3f} sec")
    print(f"Real-time factor: {proc_time / audio_duration:.3f}")

if __name__ == '__main__':
    main()
